// You are given a 2D integer array descriptions where descriptions[i] = [parenti, childi, isLefti] indicates that parenti is the parent of childi in a binary tree of unique values. Furthermore,
// If isLefti == 1, then childi is the left child of parenti.
// If isLefti == 0, then childi is the right child of parenti.
// Construct the binary tree described by descriptions and return its root.
// The test cases will be generated such that the binary tree is valid.

// class Solution {
// public:
//     TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
//         TreeNode* map[100001] = {};
//         bool child[100001] = {};
//         for (auto& d : descriptions){
//             if (map[d[0]] == nullptr) map[d[0]] = new TreeNode(d[0]);
//             TreeNode* node = (map[d[1]] == nullptr ? new TreeNode(d[1]) : map[d[1]]);
//             if (d[2])
//                 map[d[0]]->left = node;
//             else
//                 map[d[0]]->right = node;
//             map[node->val] = node;
//             child[d[1]] = true;
//         }
//         for (auto& d : descriptions)
//             if (!child[d[0]])
//                 return map[d[0]];
//         return nullptr;
//     }
// };