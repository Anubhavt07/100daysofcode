You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.
A triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).
The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.
Implement the MyCalendarTwo class:
MyCalendarTwo() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.

class MyCalendarTwo {
    using int2=pair<int, int>;
    vector<int2> S1, S2;
public:
    MyCalendarTwo() {
        S1.reserve(1000);
        S2.reserve(1000);
    }
    bool book(int start, int end) {
        for(auto& [s, t]: S2){
            if (max(s, start)<min(t, end))
                return 0;
        }
        for (auto& [s, t]: S1){
            int s0=max(s, start), t0=min(t, end);
            if  (s0 < t0)
                S2.emplace_back(s0, t0);
        }
        S1.emplace_back(start, end);
        return 1;
    }
};