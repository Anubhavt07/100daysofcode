You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.
For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.
Return the head of the modified linked list.

class Solution {
public:
    ListNode* mergeNodes(ListNode* head) {
        ListNode* modify = head->next; 
        ListNode* nextSum = modify;
        while (nextSum != nullptr) {
            int sum = 0;
            while (nextSum->val != 0) {
                sum += nextSum->val;
                nextSum = nextSum->next;
            }
            modify->val = sum;
            nextSum = nextSum->next;
            modify->next = nextSum;
            modify = modify->next;
        }
        return head->next; 
    }
};