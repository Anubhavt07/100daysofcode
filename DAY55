You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.

Permute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.

Return any permutation of s that satisfies this property.

class Solution {
public:
    string customSortString(string order, string s) {
        std::unordered_map<char, int> charCount;
        for (char c : order) {
            charCount[c] = 0;
        }
        for (char c : s) {
            if (charCount.find(c) != charCount.end()) {
                charCount[c]++;
            }
        }
        std::string sortedS;
        for (char c : order) {
            sortedS.append(charCount[c], c);
        }
        for (char c : s) {
            if (charCount.find(c) == charCount.end()) {
                sortedS.push_back(c);
            }
        }
        return sortedS;
    }
};